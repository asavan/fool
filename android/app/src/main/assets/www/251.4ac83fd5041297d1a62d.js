"use strict";(self.webpackChunksuno=self.webpackChunksuno||[]).push([[251],{251:(n,e,c)=>{c.r(e),c.d(e,{default:()=>a});var t=c(746);const a=function(n,e,c,a){const o=(0,t.A)(["recv","open","error","close","socket_open","socket_close","disconnect"]);function d(n,c,t){const a=t[n];a&&a.pc.close();const d=function(n,c){const t=new RTCPeerConnection(null);return t.onicecandidate=t=>{const a={type:"candidate",candidate:null};t.candidate&&(a.candidate=t.candidate.candidate,a.sdpMid=t.candidate.sdpMid,a.sdpMLineIndex=t.candidate.sdpMLineIndex),e.log({candidate:t.candidate}),n.send("candidate",a,c)},t}(c,n);return d.ondatachannel=c=>{!function(n,c,t){n.onmessage=function(n){return e.log("get data "+n.data),o.call("recv",n.data)},n.onopen=function(){return e.log("------ DATACHANNEL OPENED ------"),o.call("open",{sendRawTo:i,id:c})},n.onclose=async function(){e.log("------ DATACHANNEL CLOSED ------"),await o.call("disconnect",c),delete t[c]},n.onerror=function(){return o.call("disconnect",c)}}(c.channel,n,t),t[n].dc=c.channel},t[n]={pc:d,dc:null},d}const s={};const i=(c,t,a)=>{const o={from:n,to:a,action:c,data:t},d=s[a];if(d&&d.dc)return d.dc.send(JSON.stringify(o));e.log("No chanel "+a)};return{connect:function(c,t){const i=t.createSignalingChannel(n,c,e,a);return i.on("close",(n=>o.call("socket_close",n))),i.on("open",(()=>{o.call("socket_open",{}),i.send("connected",{id:n},"all")})),i.on("error",(n=>o.call("error",n))),i.on("message",(async c=>{if(c.from!==n)if(e.log("Websocket message received: ",c),"candidate"===c.action){const n=s[c.from];if(!n)return;const e=n.pc;c.data.candidate?await e.addIceCandidate(c.data):await e.addIceCandidate(null)}else if("offer"===c.action){const n=d(c.from,i,s);await async function(n,c,t,a){e.log("------ PROCESSED OFFER ------"),await c.setRemoteDescription(n);const o=await c.createAnswer();t.send("answer",{type:"answer",sdp:o.sdp},a),await c.setLocalDescription(o)}(c.data,n,i,c.from)}else"connected"===c.action||c.action})),Promise.resolve(i)},on:function(n,e){return o.on(n,e)},registerHandler:function(n,e){o.setOnce("recv",(c=>{const t=JSON.parse(c),a=t.data,o=n[t.action];"function"==typeof o&&e.add((()=>o(a,t.from)))}))},sendRawTo:i,sendRawAll:(c,t,a)=>{e.log(t);const o={from:n,to:"all",action:c,data:t};for(const[n,c]of Object.entries(s))if(a&&a.includes(n))e.log("ignore "+n);else if(c.dc)try{c.dc.send(JSON.stringify(o))}catch(n){}}}}}}]);