"use strict";(self.webpackChunksuno=self.webpackChunksuno||[]).push([[501],{501:(e,n,o)=>{o.r(n),o.d(n,{default:()=>s});var r=o(746);function t(){}const s={getConnectionUrl:function(e,n){if(e.wh)return e.wh;if("https:"===n.protocol)throw new Error("Invalid protocol");return"ws://"+n.hostname+":"+e.wsPort},createSignalingChannel:function(e,n,o){const s=(0,r.A)(["error","open","message","beforeclose","close"]),a=new WebSocket(n);function c(e){o.log("Websocket message received: "+e);const n=JSON.parse(e);return s.call("message",n)}return a.addEventListener("open",(()=>s.call("open",e))),a.onclose=function(n){return o.log("Websocket closed "+n.code+" "+n.reason),s.call("close",e)},a.onmessage=async function(e){if(e.data instanceof Blob){return c(await e.data.text())}return c(e.data)},a.onerror=function(n){return o.error(n),s.call("error",e)},{on:(e,n)=>s.on(e,n),send:(n,r,t,s)=>{const c={from:e,to:t,action:n,data:r,ignore:s};return o.log("Sending ["+e+"] to ["+t+"]: "+JSON.stringify(r)),a.send(JSON.stringify(c))},close:async()=>(await s.call("beforeclose",e),a.onerror=t,a.close()),ready:function(){return new Promise((e=>{1===a.readyState?e():a.addEventListener("open",e)}))}}}}}}]);