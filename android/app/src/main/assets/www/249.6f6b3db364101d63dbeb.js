"use strict";(self.webpackChunksuno=self.webpackChunksuno||[]).push([[249],{249:(n,o,e)=>{e.r(o),e.d(o,{default:()=>r});var c=e(746),t=e(345);function r(n,o,e){const r=(0,c.A)(["close","disconnect","error","open","gameinit","reconnect","socket_open","socket_close"]);let s,l,i={};return{connect:function(c){return new Promise(((a,u)=>{const d=(0,t.CD)(n,c,o);l=d,d.on("error",(n=>{o.log("Connection to ws error "+n),u(n)})),d.on("message",(function(c){if(c.from!==n)if(c.to===n||"all"===c.to){if(!(c.ignore&&Array.isArray(c.ignore)&&c.ignore.includes(n)))return"connected"===c.action?e?(d.send("open",{id:n},c.from),r.call("open",{id:c.from})):void 0:r.actionKeys().includes(c.action)?(o.log("handlers.actionKeys"),r.call(c.action,c)):Object.keys(i).includes(c.action)?(o.log("callCurrentHandler"),function(n,e){const c=i[n];"function"==typeof c?s?s.add((()=>c(e.data,e.from))):o.log("No queue"):o.log("Not function")}(c.action,c)):void o.log("Unknown action "+c.action);o.log("user in ignore list")}else o.log("another user");else o.error("same user")})),d.on("close",(n=>r.call("socket_close",n))),d.on("open",(()=>(r.call("socket_open",{}),d.send("connected",{id:n},"all"),a())))}))},on:function(n,o){return r.on(n,o)},registerHandler:function(n,o){s=o,i=n},sendRawTo:(n,o,e)=>!!l&&l.send(n,o,e),sendRawAll:(n,e,c)=>!!l&&(o.log(e),l.send(n,e,"all",c))}}}}]);